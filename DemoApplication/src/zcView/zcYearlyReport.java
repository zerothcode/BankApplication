/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zcView;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JComboBox;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import zcController.zcConnection;
import zcController.zcDatabase;

/**
 *
 * @author rk
 */
public class zcYearlyReport extends javax.swing.JInternalFrame {

    /**
     * Creates new form zcCredit
     */
    public zcYearlyReport() {
        initComponents();
        con = zcController.zcConnection.rkConnection();
        db.rkAutoCompleted(new JComboBox[]{zc_Year, zcAC_Number});
        for (int i = 2018; i <= 2020; i++) {
            zc_Year.addItem(i + "");
        }
        AC_Number = db.DML("SELECT `id`,`zcACNumber` FROM `zcaccount`");
        AC_Number.entrySet().forEach((e) -> {
            zcAC_Number.addItem((String) e.getKey());
        });
        roi[0] = 0.0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zcAC_Number = new javax.swing.JComboBox<>();
        zc_Year = new javax.swing.JComboBox<>();
        btnViewReport = new javax.swing.JButton();

        setBackground(new java.awt.Color(61, 51, 51));
        setClosable(true);
        setTitle("Report");

        zcAC_Number.setEditable(true);
        zcAC_Number.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Account Number" }));
        zcAC_Number.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                zcAC_NumberItemStateChanged(evt);
            }
        });

        zc_Year.setEditable(true);
        zc_Year.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year" }));

        btnViewReport.setText("View Report");
        btnViewReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnViewReport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zc_Year, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zcAC_Number, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(zcAC_Number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(zc_Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnViewReport)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewReportActionPerformed
        try {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDateTime now = LocalDateTime.now();
            String current = dtf.format(now);

            if (isWithdraw()) {
                ps = con.prepareStatement("SELECT * FROM `zctransaction` where zcACNumber='" + accountNumber + "' ORDER BY id DESC");
                rs = ps.executeQuery();
                while (rs.next()) {
                    String investmentDate = rs.getString("zcDay") + "/" + rs.getString("zcMonth") + "/" + rs.getString("zcYear");
                    totalDays = zcController.zcCountDay.getDiiff(investmentDate, current);
                    if (rs.getString("zcACtype").equals("Debit")) {
                        totalAmount = rs.getDouble("totalCredit");
                        previousRateAmount = rs.getDouble("rate");
                        int indexMonth=rs.getInt("zcMonth");
                        rate = totalDays * 0.010958904;
                        rateOfinterest = (totalAmount * rate) / 100;
                        roi[indexMonth] += rateOfinterest+previousRateAmount;
                        //roi[indexMonth] += previousRateAmount;
                        month[indexMonth] += totalAmount;
                        totalAmount1 += month[indexMonth];
                        totalROI += roi[indexMonth];
                        break;
                    } else {
                        totalAmount = rs.getDouble("zcAmount");
                        switch (rs.getInt("zcMonth")) {
                            case 1:
                                setRoi(1);
                                break;
                            case 2:
                                setRoi(2);
                                break;
                            case 3:
                                setRoi(3);
                                break;
                            case 4:
                                setRoi(4);
                                break;
                            case 5:
                                setRoi(5);
                                break;
                            case 6:
                                setRoi(6);
                                break;
                            case 7:
                                setRoi(7);
                                break;
                            case 8:
                                setRoi(8);
                                break;
                            case 9:
                                setRoi(9);
                                break;
                            case 10:
                                setRoi(10);
                                break;
                            case 11:
                                setRoi(11);
                                break;
                            case 12:
                                setRoi(12);
                                break;
                        }
                    }
                }
                viewReport();
            } else {
                ps = con.prepareStatement("SELECT * FROM `zctransaction` where zcACNumber='" + accountNumber + "'");
                rs = ps.executeQuery();
                while (rs.next()) {
                    String investmentDate = rs.getString("zcDay") + "/" + rs.getString("zcMonth") + "/" + rs.getString("zcYear");
                    totalDays = zcController.zcCountDay.getDiiff(investmentDate, current);
                    totalAmount = rs.getDouble("zcAmount");
                    switch (rs.getInt("zcMonth")) {
                        case 1:
                            setRoi(1);
                            break;
                        case 2:
                            setRoi(2);
                            break;
                        case 3:
                            setRoi(3);
                            break;
                        case 4:
                            setRoi(4);
                            break;
                        case 5:
                            setRoi(5);
                            break;
                        case 6:
                            setRoi(6);
                            break;
                        case 7:
                            setRoi(7);
                            break;
                        case 8:
                            setRoi(8);
                            break;
                        case 9:
                            setRoi(9);
                            break;
                        case 10:
                            setRoi(10);
                            break;
                        case 11:
                            setRoi(11);
                            break;
                        case 12:
                            setRoi(12);
                            break;
                    }
                }
                viewReport();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnViewReportActionPerformed

    private void zcAC_NumberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_zcAC_NumberItemStateChanged
        accountNumber = zcAC_Number.getSelectedItem().toString();
    }//GEN-LAST:event_zcAC_NumberItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewReport;
    private javax.swing.JComboBox<String> zcAC_Number;
    private javax.swing.JComboBox<String> zc_Year;
    // End of variables declaration//GEN-END:variables
    zcDatabase db = new zcDatabase();
    HashMap<Object, Object> AC_Number = new HashMap<>();
    Map param = new HashMap();
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    private String accountNumber = null;
    private final double[] month = new double[13];
    private final double[] roi = new double[13];
    private final String[] monthName = new String[]{"null", "creditJanuary", "creditFebruary", "creditMarch", "creditApril", "creditMay", "creditJune", "creditJuly", "creditAugust", "creditSeptember", "creditOctober", "creditNovember", "creditDecember"};
    private final String[] rateName = new String[]{"null", "roiJanuary", "roiFebruary", "roiMarch", "roiApril", "roiMay", "roiJune", "roiJuly", "roiAugust", "roiSeptember", "roiOctober", "roiNovember", "roiDecember"};
    private double totalDays, rateOfinterest = 0.0, rate = 0.0, totalAmount = 0.0, previousRateAmount = 0.0;
    private double totalROI = 0.0, totalAmount1 = 0.0;

    private boolean isWithdraw() {
        try {
            ps = con.prepareStatement("SELECT * FROM `zctransaction` WHERE `zcACNumber` = '" + zcAC_Number.getSelectedItem() + "' && `zcACtype`='Debit'");
            rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void setRoi(int index) {
        rate = totalDays * 0.010958904;
        rateOfinterest = (totalAmount * rate) / 100;
        roi[index] += rateOfinterest;
        month[index] += totalAmount;
        totalAmount1 += month[index];
        totalROI += roi[index];
    }

    private void viewReport() {
        try {
            Map param = new HashMap();
            for (int i = 1; i <= 12; i++) {
                param.put(monthName[i], month[i]);
                param.put(rateName[i], roi[i]);
            }
            param.put("totalAmount", totalAmount1);
            param.put("totalROI", totalROI);
            param.put("accountNumber",accountNumber);
            for (int i = 1; i <= 12; i++) {
                month[i] = 0.0;
                roi[i] = 0.0;
            }
            //String report = new File("").getAbsolutePath() + "\\src\\zcModel\\YearlyReport.jrxml";
            String report = new File("").getAbsolutePath() + "/src/zcModel/YearlyReport.jrxml";
            JasperReport jasperReport = JasperCompileManager.compileReport(report);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, param, zcConnection.rkConnection());
            JasperViewer.viewReport(jasperPrint, false);

        } catch (Exception e) {
            //javax.swing.JOptionPane.showMessageDialog(this,rkValidation.printErrorStatic("Jasper Report", e.getMessage()));
            e.printStackTrace();
        }
    }
}
